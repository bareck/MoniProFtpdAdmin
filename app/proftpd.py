"""ProFTPD 配置檔生成模組"""

from flask import current_app
from .models import Directory, DirectoryPermission, FtpUser, FtpGroup, SystemSetting
import os
import tempfile
import shutil
import subprocess
import time

class ProFTPDConfigGenerator:
    """ProFTPD 配置檔生成器"""
    
    def __init__(self):
        self.base_dir = SystemSetting.get_value('ftp_base_dir', current_app.config.get('PROFTPD_BASE_DIR', '/backup/ftpdata'))
        self.config_dir = self._detect_config_dir()
        self.main_config_file = os.path.join(self.config_dir, 'proftpd.conf')
        self.dynamic_config_file = os.path.join(self.config_dir, 'dynamic.conf')
        
    def _detect_config_dir(self):
        """自動偵測 ProFTPD 配置目錄"""
        # 環境變數覆蓋
        if os.environ.get('PROFTPD_CONFIG_DIR'):
            return os.environ.get('PROFTPD_CONFIG_DIR')
        
        # 優先檢查自編譯路徑
        if os.path.exists('/usr/local/etc/proftpd.conf'):
            return '/usr/local/etc'
        
        # 檢查套件管理器路徑
        if os.path.exists('/etc/proftpd/proftpd.conf'):
            return '/etc/proftpd'
        
        # 預設值
        return current_app.config.get('PROFTPD_CONFIG_DIR', '/etc/proftpd')
    
    def _get_pid_file_path(self):
        """取得 PID 檔案路徑"""
        # 環境變數覆蓋
        if os.environ.get('PROFTPD_PID_FILE'):
            return os.environ.get('PROFTPD_PID_FILE')
        
        # 檢查 systemd service 檔案中的 PIDFile 設定
        systemd_service_file = '/etc/systemd/system/proftpd.service'
        if os.path.exists(systemd_service_file):
            try:
                with open(systemd_service_file, 'r') as f:
                    for line in f:
                        line = line.strip()
                        if line.startswith('PIDFile='):
                            return line.split('=', 1)[1]
            except:
                pass
        
        # 根據配置目錄決定預設 PID 檔案路徑
        if self.config_dir.startswith('/usr/local'):
            # 自編譯版本
            return '/usr/local/var/proftpd/proftpd.pid'
        else:
            # 套件管理器版本
            return '/var/run/proftpd.pid'
    
    def generate_dynamic_config(self):
        """生成動態配置檔內容"""
        config_lines = []
        
        # 檔案頭部註解
        config_lines.extend([
            "# ProFTPD Dynamic Configuration",
            "# Generated by MoniProFtpdAdmin",
            "# This file is automatically generated. Do not edit manually.",
            "",
        ])
        
        # 生成目錄權限配置
        directories = Directory.query.filter_by(is_active=True).all()
        
        for directory in directories:
            config_lines.extend(self._generate_directory_config(directory))
            config_lines.append("")
        
        return "\n".join(config_lines)
    
    def _generate_directory_config(self, directory):
        """生成單個目錄的配置"""
        lines = []
        
        # 目錄區塊開始
        lines.append(f"# Directory: {directory.name}")
        lines.append(f"<Directory {directory.path}>")
        
        # 預設拒絕所有
        lines.extend([
            "  <Limit ALL>",
            "    DenyAll",
            "  </Limit>",
            ""
        ])
        
        # 獲取此目錄的所有權限設定
        permissions = DirectoryPermission.query.filter_by(directory_id=directory.id).all()
        
        # 按權限類型分組
        read_users = []
        read_groups = []
        write_users = []
        write_groups = []
        delete_users = []
        delete_groups = []
        
        for perm in permissions:
            if perm.user:
                if perm.can_read:
                    read_users.append(perm.user.username)
                if perm.can_write:
                    write_users.append(perm.user.username)
                if perm.can_delete:
                    delete_users.append(perm.user.username)
            elif perm.group:
                if perm.can_read:
                    read_groups.append(perm.group.groupname)
                if perm.can_write:
                    write_groups.append(perm.group.groupname)
                if perm.can_delete:
                    delete_groups.append(perm.group.groupname)
        
        # 生成讀取權限配置
        if read_users or read_groups:
            lines.append("  # Read permissions")
            lines.append("  <Limit READ CWD PWD LIST NLST STAT MLSD>")
            
            for user in read_users:
                lines.append(f"    AllowUser {user}")
            for group in read_groups:
                lines.append(f"    AllowGroup {group}")
            
            lines.extend([
                "    DenyAll",
                "  </Limit>",
                ""
            ])
        
        # 生成寫入權限配置
        if write_users or write_groups:
            lines.append("  # Write permissions")
            lines.append("  <Limit STOR STOU APPE>")
            
            for user in write_users:
                lines.append(f"    AllowUser {user}")
            for group in write_groups:
                lines.append(f"    AllowGroup {group}")
            
            lines.extend([
                "    DenyAll",
                "  </Limit>",
                ""
            ])
        
        # 生成刪除權限配置
        if delete_users or delete_groups:
            lines.append("  # Delete and directory operations")
            lines.append("  <Limit DELE MKD RMD RNFR RNTO SITE_CHMOD>")
            
            for user in delete_users:
                lines.append(f"    AllowUser {user}")
            for group in delete_groups:
                lines.append(f"    AllowGroup {group}")
            
            lines.extend([
                "    DenyAll",
                "  </Limit>",
                ""
            ])
        
        # 目錄區塊結束
        lines.append("</Directory>")
        
        return lines
    
    def write_dynamic_config(self):
        """寫入動態配置檔"""
        try:
            config_content = self.generate_dynamic_config()
            
            # 確保配置目錄存在
            os.makedirs(self.config_dir, exist_ok=True)
            
            # 使用臨時檔案來避免寫入過程中的問題
            with tempfile.NamedTemporaryFile(mode='w', suffix='.conf', delete=False) as temp_file:
                temp_file.write(config_content)
                temp_file_path = temp_file.name
            
            # 原子性移動檔案
            shutil.move(temp_file_path, self.dynamic_config_file)
            
            # 設定適當的檔案權限
            os.chmod(self.dynamic_config_file, 0o644)
            
            return True, "配置檔生成成功"
            
        except Exception as e:
            return False, f"配置檔生成失敗: {str(e)}"
    
    def validate_config(self):
        """驗證配置檔語法"""
        try:
            # 使用 proftpd -t 來檢查配置檔語法
            import subprocess
            main_config = current_app.config.get('PROFTPD_MAIN_CONFIG', '/etc/proftpd/proftpd.conf')
            result = subprocess.run(
                ['proftpd', '-t', '-c', main_config],
                capture_output=True,
                text=True,
                timeout=10
            )
            
            if result.returncode == 0:
                return True, "配置檔語法正確"
            else:
                return False, f"配置檔語法錯誤: {result.stderr}"
                
        except subprocess.TimeoutExpired:
            return False, "配置檔驗證超時"
        except FileNotFoundError:
            return False, "proftpd 指令不存在"
        except Exception as e:
            return False, f"配置檔驗證失敗: {str(e)}"
    
    def backup_config(self):
        """備份配置檔"""
        try:
            if os.path.exists(self.dynamic_config_file):
                backup_file = f"{self.dynamic_config_file}.backup"
                shutil.copy2(self.dynamic_config_file, backup_file)
                return True, f"配置檔已備份至 {backup_file}"
            else:
                return True, "配置檔不存在，無需備份"
        except Exception as e:
            return False, f"配置檔備份失敗: {str(e)}"
    
    def generate_main_config(self):
        """生成主配置檔內容"""
        from datetime import datetime
        
        # 獲取系統設定
        server_name = SystemSetting.get_value('ftp_server_name', 'FTP Server with Virtual Users')
        max_clients = SystemSetting.get_value('ftp_max_clients', '30')
        max_clients_per_host = SystemSetting.get_value('ftp_max_clients_per_host', '5')
        passive_ports = SystemSetting.get_value('ftp_passive_ports', '50000 50100')
        # Convert passive ports format from "60000-65000" to "60000 65000"
        if '-' in passive_ports:
            passive_ports = passive_ports.replace('-', ' ')
        timeout_idle = SystemSetting.get_value('ftp_timeout_idle', '600')
        timeout_transfer = SystemSetting.get_value('ftp_timeout_transfer', '300')
        umask = SystemSetting.get_value('ftp_umask', '022')
        
        # 日誌設定
        enable_access_log = SystemSetting.get_value('log_access_enabled', 'true') == 'true'
        enable_auth_log = SystemSetting.get_value('log_auth_enabled', 'true') == 'true'
        log_level = SystemSetting.get_value('log_level', 'notice')
        
        # SSL 設定
        ssl_required = SystemSetting.get_value('ssl_required', 'false') == 'true'
        
        config_lines = []
        
        # 基本伺服器設定
        config_lines.extend([
            f'# ProFTPD Configuration - Generated by MoniProFtpdAdmin',
            f'# Generated at: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}',
            '',
            f'ServerName "{server_name}"',
            'ServerType standalone',
            'DefaultServer on',
            'Port 21',
            f'Umask {umask}',
            f'MaxInstances {max_clients}',
            '',
            '# PID 檔案設定',
            f'PidFile {self._get_pid_file_path()}',
            '',
            '# 以 nobody 運行，更安全',
            '#User nobody',
            '#Group nobody',
            '',
        ])
        
        # 日誌設定
        config_lines.extend([
            '# 日誌設定',
            'SystemLog /var/log/proftpd/proftpd.log',
        ])
        
        if log_level != 'notice':
            config_lines.append(f'SyslogLevel {log_level}')
            
        config_lines.extend([
            'TransferLog /var/log/proftpd/xfer.log',
            '',
        ])
        
        # MLSD 支援
        config_lines.extend([
            '# 支援 MLSD',
            '<IfModule mod_facts.c>',
            '  FactsAdvertise on',
            '</IfModule>',
            '',
        ])
        
        # 虛擬用戶設定
        auth_user_file = os.path.join(self.config_dir, 'ftpd.passwd')
        auth_group_file = os.path.join(self.config_dir, 'ftpd.group')
        
        config_lines.extend([
            '# 虛擬用戶設定',
            'RequireValidShell off',
            f'AuthUserFile {auth_user_file}',
            f'AuthGroupFile {auth_group_file}',
            'AuthOrder mod_auth_file.c',
            '',
        ])
        
        # PAM 設定
        config_lines.extend([
            '# 完全禁用 PAM 認證',
            '<IfModule mod_auth_pam.c>',
            '  AuthPAM off',
            '</IfModule>',
            '',
        ])
        
        # 禁止匿名登入
        config_lines.extend([
            '# 禁止匿名登入',
            '<Anonymous ~ftp>',
            '  <Limit LOGIN>',
            '    DenyAll',
            '  </Limit>',
            '</Anonymous>',
            '',
        ])
        
        # DefaultRoot 設定
        config_lines.extend([
            '# DefaultRoot 設定 - 限制用戶存取範圍',
            f'DefaultRoot {self.base_dir} admins',
            'DefaultRoot ~',
            '',
        ])
        
        # SSL 設定
        if ssl_required:
            config_lines.extend([
                '# SSL 設定',
                '<IfModule mod_tls.c>',
                '  TLSEngine on',
                '  TLSRequired on',
                '  TLSProtocol TLSv1.2 TLSv1.3',
                '  TLSCipherSuite HIGH:MEDIUM:!ADH',
                '  TLSOptions NoCertRequest EnableDiags NoSessionReuseRequired',
                '  TLSVerifyClient off',
                '  TLSRSACertificateFile /etc/ssl/certs/proftpd.crt',
                '  TLSRSACertificateKeyFile /etc/ssl/private/proftpd.key',
                '</IfModule>',
                '',
            ])
        
        # 包含動態配置
        config_lines.extend([
            f'Include {self.dynamic_config_file}',
            '',
        ])
        
        # Global 設定
        config_lines.extend([
            '<Global>',
            f'  # 限制被動模式端口範圍',
            f'  PassivePorts {passive_ports}',
            '',
            '  # 超時設定',
            f'  TimeoutIdle {timeout_idle}',
            f'  TimeoutNoTransfer {timeout_transfer}',
            f'  TimeoutStalled {timeout_transfer}',
            '',
            '  # 顯示自定義訊息',
            f'  DisplayLogin {os.path.join(self.config_dir, "welcome.msg")}',
            '  DisplayChdir .message',
            '',
            '  # 限制同時連線數',
            f'  MaxClients {max_clients}',
            f'  MaxClientsPerHost {max_clients_per_host}',
            '',
            '  # 隱藏伺服器版本',
            '  ServerIdent off',
            '',
        ])
        
        # 擴展日誌
        if enable_access_log:
            config_lines.append('  ExtendedLog /var/log/proftpd/access.log WRITE,READ')
        if enable_auth_log:
            config_lines.append('  ExtendedLog /var/log/proftpd/auth.log AUTH')
            
        config_lines.extend([
            '</Global>',
            '',
        ])
        
        return '\n'.join(config_lines)
    
    def write_main_config(self):
        """寫入主配置檔"""
        try:
            config_content = self.generate_main_config()
            
            # 確保配置目錄存在
            os.makedirs(self.config_dir, exist_ok=True)
            
            # 備份現有配置
            if os.path.exists(self.main_config_file):
                backup_file = f"{self.main_config_file}.backup.{int(time.time())}"
                shutil.copy2(self.main_config_file, backup_file)
                current_app.logger.info(f"主配置檔已備份至: {backup_file}")
            
            # 寫入新配置檔
            with open(self.main_config_file, 'w', encoding='utf-8') as f:
                f.write(config_content)
            
            current_app.logger.info(f"主配置檔已生成: {self.main_config_file}")
            return True, f"主配置檔已生成: {self.main_config_file}"
            
        except Exception as e:
            current_app.logger.error(f"生成主配置檔失敗: {e}")
            return False, f"生成主配置檔失敗: {str(e)}"
    
    def validate_main_config(self):
        """驗證主配置檔語法"""
        try:
            # 使用 proftpd -t 驗證配置檔語法
            result = subprocess.run(
                ['proftpd', '-t', '-c', self.main_config_file],
                capture_output=True,
                text=True,
                timeout=10
            )
            
            if result.returncode == 0:
                return True, "主配置檔語法正確"
            else:
                return False, f"主配置檔語法錯誤: {result.stderr}"
                
        except subprocess.TimeoutExpired:
            return False, "主配置檔驗證超時"
        except FileNotFoundError:
            return False, "proftpd 指令不存在"
        except Exception as e:
            return False, f"主配置檔驗證失敗: {str(e)}"
    
    def restart_proftpd(self):
        """重新啟動 ProFTPD 服務"""
        try:
            # 使用 systemctl 重新啟動服務
            result = subprocess.run(
                ['sudo', 'systemctl', 'restart', 'proftpd'],
                capture_output=True,
                text=True,
                timeout=30
            )
            
            if result.returncode == 0:
                return True, "ProFTPD 服務已重新啟動"
            else:
                return False, f"重新啟動 ProFTPD 失敗: {result.stderr}"
                
        except subprocess.TimeoutExpired:
            return False, "重新啟動 ProFTPD 超時"
        except Exception as e:
            return False, f"重新啟動 ProFTPD 失敗: {str(e)}"
    
    def get_config_preview(self, config_type='dynamic'):
        """取得配置檔預覽"""
        if config_type == 'main':
            return self.generate_main_config()
        return self.generate_dynamic_config()

def generate_proftpd_config():
    """生成 ProFTPD 配置檔的便利函數"""
    generator = ProFTPDConfigGenerator()
    return generator.write_dynamic_config()

def validate_proftpd_config():
    """驗證 ProFTPD 配置檔的便利函數"""
    generator = ProFTPDConfigGenerator()
    return generator.validate_config()

def backup_proftpd_config():
    """備份 ProFTPD 配置檔的便利函數"""
    generator = ProFTPDConfigGenerator()
    return generator.backup_config()

def get_proftpd_config_preview():
    """取得 ProFTPD 配置檔預覽的便利函數"""
    generator = ProFTPDConfigGenerator()
    return generator.get_config_preview()